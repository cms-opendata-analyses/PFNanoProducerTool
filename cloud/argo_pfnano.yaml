apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: pfnano-process-
spec:
  entrypoint: cms-od-example
  volumes:
  - name: task-pv-storage
    persistentVolumeClaim:
      claimName: nfs-1

  arguments:
    parameters:
    - name: startFile                                  
      value: 1
    - name: nEvents                               
      value: 10000
    - name: recid
      value: 0
    - name: nJobs
      value: 4
    

  templates:
  - name: cms-od-example
    inputs:
      parameters:
      - name: startFile
      - name: nEvents
      - name: recid
      - name: nJobs
    dag:
      tasks:
      - name: prepare
        template: prepare-template

      - name: get-metadata
        dependencies: [prepare]
        template: get-metadata-template
        arguments:
         parameters:
          - name: recid
            value: "{{inputs.parameters.recid}}"
          - name: dataType
            value: "{{outputs.parameters.dataType}}"

      - name: joblist
        dependencies: [get-metadata]
        template: joblist-template
        arguments:
         parameters:
          - name: startFile
            value: "{{inputs.parameters.startFile}}"
          - name: nJobs
            value: "{{inputs.parameters.nJobs}}"
          - name: nEvents
            value: "{{inputs.parameters.nEvents}}"
          - name: totFiles
            value: "{{tasks.get-metadata.outputs.result}}"

      - name: runpfnano
        dependencies: [joblist]
        template: runpfnano-template
        arguments:
         parameters:
          - name: recid
            value: "{{inputs.parameters.recid}}"
          - name: dataType
            value: "{{tasks.get-metadata.outputs.parameters.dataType}}"
          - name: it
            value: "{{item.it}}"
          - name: firstFile
            value: "{{item.firstfile}}"
          - name: lastFile
            value: "{{item.lastfile}}" 
          - name: eventsInJob
            value: "{{item.eventsinjob}}"
        withParam: "{{tasks.joblist.outputs.result}}"

      - name: merge-step
        dependencies: [runpfnano]
        template: merge-step-template
          
      - name: analysis-step
        dependencies: [merge-step]
        template: analysis-step-template
        
  # prepare the data directories needed in the workflow steps      
  - name: prepare-template
    script:
      image: ubuntu:latest
      command: [bash]
      source: |
        mkdir -p /mnt/vol/scatter
        chmod -R 777 /mnt/vol
      volumeMounts:
      - name: task-pv-storage
        mountPath: /mnt/vol

  # Get the metadata of the dataset
  # Accidentally showing three different ways of passing parameters/files btw the steps
  # - the full list of files: write it to a file on the common disk mounted on /mnt/vol
  # - the type of data: write it to the step's ouput parameter "{{tasks.get-metadata.outputs.parameters.dataType}}#   (through a temporary file /tmp/type.txt)
  # - the total number of files which is the stdout output of this step and goes to {{tasks.get-metadata.outputs.result}}
  #
  # For now, cernopendata-client is not used as the recid does not exist yet
  # - Temporarily: Type and n files hardcoded here, get the listing from the repository
  - name: get-metadata-template
    inputs:
      parameters:
      - name: recid
    outputs:
      parameters:
      - name: dataType
        valueFrom:
          default: "default"
          path: /tmp/type.txt
    script:
      image: cernopendata/cernopendata-client
      command: [bash]
      source: |
        #cernopendata-client get-file-locations --recid "{{inputs.parameters.recid}}" --protocol xrootd > /mnt/vol/files_{{inputs.parameters.recid}}.txt;
        #cernopendata-client get-metadata --recid "{{inputs.parameters.recid}}"  --output-value type.secondary > /tmp/type.txt 
        #cernopendata-client get-metadata --recid "{{inputs.parameters.recid}}"  --output-value distribution.number_files
        curl -s -o /mnt/vol/files_{{inputs.parameters.recid}}.txt https://raw.githubusercontent.com/cms-opendata-analyses/PFNanoProducerTool/master/cloud/filelist-temp.py
        echo Collision > /tmp/type.txt
        echo 1236
      volumeMounts:
      - name: task-pv-storage
        mountPath: /mnt/vol

  # Generate the iterator list for the scatter step
  # Compute the number of events and files for each step
  # Write out the list with first and last filenumbers and the numebr of events to be taken as the input of the following steps
  # (see {{tasks.joblist.outputs.result}} as "withParam" in runpfnano-template)
  - name: joblist-template
    inputs:
      parameters:
      - name: nJobs
      - name: nEvents
      - name: startFile
      - name: totFiles
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import json
        import sys
        start = {{inputs.parameters.startFile}}
        nJobs = {{inputs.parameters.nJobs}}
        nEvents = {{inputs.parameters.nEvents}}
        totFiles = {{inputs.parameters.totFiles}}
        filesInJob = int(totFiles/nJobs)
        modFiles = totFiles % nJobs
        eventsInJob = int(nEvents/nJobs)
        modEvents = nEvents % nJobs
        itlist = [i for i in range(1, nJobs+1)]
        dictlist = []
        for i in itlist:
          first = start+(i-1)*filesInJob
          last = first + filesInJob - 1
          adict = { "it": i, 
                    "firstfile": first, 
                    "lastfile":  last,
                    "eventsinjob": eventsInJob}
          if i == nJobs:            
            adict = { "it": i, 
                      "firstfile": first, 
                      "lastfile":  last + modFiles,
                      "eventsinjob": eventsInJob + modEvents}
          dictlist.append(adict)
        json.dump(dictlist, sys.stdout)
        
        
  # Run the CMSSW step
  # This iterates over the list that it gets as "withParam" 
  - name: runpfnano-template
    inputs:
      parameters:
      - name: it
      - name: firstFile
      - name: lastFile
      - name: recid
      - name: dataType
      - name: eventsInJob
    script:
      image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker-opendata/cmssw_10_6_30-slc7_amd64_gcc700
      command: [bash]
      source: | 
        
        sudo chown $USER /mnt/vol
        source /opt/cms/entrypoint.sh
        git clone https://github.com/cms-opendata-analyses/PFNanoProducerTool.git PhysicsTools/PFNano
        cd PhysicsTools/PFNano
        scram b

        it="{{inputs.parameters.it}}"
        eventsInJob="{{inputs.parameters.eventsInJob}}"
        dataType="{{inputs.parameters.dataType}}"
        echo Datatype $dataType
        isData=False
        if  echo $dataType | grep Collision ; then isData=True; fi

        firstFile="{{inputs.parameters.firstFile}}"
        lastFile="{{inputs.parameters.lastFile}}"
        echo firstFile $firstFile
        echo lastFile $lastFile

        cmsRun python/pfnano_data_2016UL_OpenData_cloud.py $firstFile $lastFile '"/mnt/vol/files_{{inputs.parameters.recid}}.txt"' $eventsInJob
        
        mv nano_data2016.root /mnt/vol/scatter/pfnanooutput$it.root

      volumeMounts:
      - name: task-pv-storage
        mountPath: /mnt/vol

      resources:
        requests:
          cpu: 750m

 
  # merge the files from the scatter steps to a single file
  - name: merge-step-template
    script:
      image: rootproject/root:latest
      command: [bash]
      source: | 
        rm -f /mnt/vol/pfnanooutput.root
        hadd -f /mnt/vol/pfnanooutput.root /mnt/vol/scatter/pfnanooutput*.root
        rm -rf /mnt/vol/scatter/ # this contains the separated output files, now merged
        
      volumeMounts:
      - name: task-pv-storage
        mountPath: /mnt/vol


  # prepare some histograms to check the merged output file
  - name: analysis-step-template
    script:
      image: rootproject/root:latest
      command: [bash]
      source: | 
        
        cp /mnt/vol/pfnanooutput.root .
        curl -LO https://raw.githubusercontent.com/cms-opendata-analyses/PhysObjectExtractorTool/odws2023/PhysObjectExtractor/cloud/analysis.C

        root -l -b -q analysis.C
        mv analysis_output.root /mnt/vol/analysis_output.root
        mv *.png /mnt/vol
        
      volumeMounts:
      - name: task-pv-storage
        mountPath: /mnt/vol